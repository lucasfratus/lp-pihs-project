#[cfg(feature = "buddy-alloc")]
mod alloc;
mod wasm4;
use wasm4::*;

// Global and Structures ---------------------------------------------------------------------------------------------------
// Game State and Settings
static mut GAME_MENU: bool = true;
static mut GAME_OVER: bool = false;
static mut FRAME_COUNT: u32 = 0;
static mut RNG_SEED: u32 = 123456789;

// Scenario Settings
const FLOOR_HEIGHT: i32 = 140;
const GRAVITY: i32 = 1;
const GROUND_LENGTH: i32 = 180;
static mut SCENARIO_SPEED: i32 = 1;
static mut GROUND_X: i32 = 0;

// Player Settings
const PLAYER_SIZE: i32 = 8;
const PLAYER_JUMP_FORCE: i32 = -14;

// Coins Settings
const COIN_SIZE: i32 = 10;
const COIN_MAX_Y: i32 = 60;
const COIN_MIN_Y: i32 = 130;
static mut COIN_SPEED: i32 = 2;

// Barrier Settings
const BARRIER_WIDTH: i32 = 12;
const BARRIER_GAP: i32 = 50;
const BARRIER_DISPLACEMENT: i32 = 10;
const BARRIER_UP_HEIGHT: i32 = 90;
const BARRIER_DOWN_HEIGHT: i32 = 80;

// Fireball Settings
const BALL_SIZE: i32 = 10;
const BALL_X_SPEED: i32 = 2;
const BALL_Y_SPEED: i32 = 1;

// Player Struct
pub(crate) struct Player {
    x: i32,
    y: i32,
    velocity_y: i32,
    is_jumping: bool,
    score: u8,
    lives: u8,
}

// Coin Struct
struct Coin {
    x: i32,
    y: i32,
    not_collected: bool,
}

// Barrier Struct
struct Barrier {
    x: i32,
    y: i32,
    height: i32,
    active: bool,
}

// Fireball Struct
struct Ball {
    x: i32,
    y: i32,
    active: bool,
    rising: bool,
}

// Build Global Structures -------------------------------------------------------------------------------------------------
static mut PLAYER: Player = Player { 
    x: 45,
    y: 30,
    velocity_y: 0,
    is_jumping: true,
    score: 0,
    lives: 3
};

static mut COIN: Coin = Coin {
    x: SCREEN_SIZE as i32 + 20,
    y: 100,
    not_collected: true,
};

static mut BARRIERS: [Barrier; 2] = [
    Barrier {
        x: SCREEN_SIZE as i32 + BARRIER_WIDTH,
        y: BARRIER_DOWN_HEIGHT,
        height: FLOOR_HEIGHT - BARRIER_DOWN_HEIGHT,
        active: true,
    },
    Barrier {
        x: SCREEN_SIZE as i32 + BARRIER_WIDTH + BARRIER_GAP,
        y: 0,
        height: BARRIER_UP_HEIGHT,
        active: true,
    }
];

static mut BALL: Ball = Ball {
    x: SCREEN_SIZE as i32 + BALL_SIZE,
    y: 0,
    active: true,
    rising: false,
};

// Game Start Functions ----------------------------------------------------------------------------------------------------
fn check_game_start() {
    unsafe {
        let gamepad = *wasm4::GAMEPAD1;
        if gamepad & BUTTON_2 != 0 {
            GAME_MENU = false;
            start();
        }
    }
}

#[no_mangle]
pub fn start() {
    unsafe {
        *PALETTE = [
            0x130026,
            0x7451c8,
            0xff66b2,
            0xf2ccff,
        ];

        // Game State Settings
        SCENARIO_SPEED = 1;
        GROUND_X = 0;
        FRAME_COUNT = 0;
        GAME_OVER = false;
        
        // Player
        PLAYER.x = 45;
        PLAYER.y = 30;
        PLAYER.velocity_y = 0;
        PLAYER.is_jumping = true;
        PLAYER.score = 0;
        PLAYER.lives = 3;

        // Coin
        COIN.x = SCREEN_SIZE as i32 + 20;
        COIN.y = random_range(COIN_MAX_Y, COIN_MIN_Y);
        COIN.not_collected = true;

        // Barriers
        BARRIERS[0].x = SCREEN_SIZE as i32 + BARRIER_WIDTH;
        BARRIERS[0].y = BARRIER_DOWN_HEIGHT;
        BARRIERS[0].height = FLOOR_HEIGHT - BARRIER_DOWN_HEIGHT;
        BARRIERS[0].active = true;
        BARRIERS[1].x = SCREEN_SIZE as i32 + BARRIER_WIDTH + BARRIER_GAP;
        BARRIERS[1].y = 0;
        BARRIERS[1].height = BARRIER_UP_HEIGHT;
        BARRIERS[1].active = true;

        // Ball
        BALL.x = SCREEN_SIZE as i32 + BALL_SIZE;
        BALL.y = random_range(0, FLOOR_HEIGHT);
        if BALL.y < FLOOR_HEIGHT / 2 {
            BALL.rising = false
        } else {
            BALL.rising = true
        }
        BALL.active = true;
    }
}

// Logical Functions -------------------------------------------------------------------------------------------------------
fn random_u32() -> u32 {
    unsafe {
        RNG_SEED = RNG_SEED.wrapping_mul(1664525).wrapping_add(1013904223);
        RNG_SEED
    }
}

fn random_range(min: i32, max: i32) -> i32 {
    let r = random_u32();
    min + (r % ((max - min + 1) as u32)) as i32
}

fn collision(a_x: i32, a_y: i32, a_w: i32, a_h: i32, b_x: i32, b_y: i32, b_w: i32, b_h: i32) -> bool {
    a_x < b_x + b_w &&
    a_x + a_w > b_x &&
    a_y < b_y + b_h &&
    a_y + a_h > b_y
}

// Game Update Functions ---------------------------------------------------------------------------------------------------
fn update_player_position() {
    unsafe {
        let gamepad = *wasm4::GAMEPAD1;
        // Horizontal Movement
        if gamepad & BUTTON_LEFT != 0 {
            PLAYER.x -= 2;
        }
        if gamepad & BUTTON_RIGHT != 0 {
            PLAYER.x += 2;
        }

        // Jump Movement
        if gamepad & BUTTON_1 != 0 && !PLAYER.is_jumping {
            PLAYER.velocity_y = PLAYER_JUMP_FORCE;
            PLAYER.is_jumping = true;
        }

        // Apply Gravity
        PLAYER.velocity_y += GRAVITY;
        PLAYER.y += PLAYER.velocity_y;
        
        // Checks if Player has reached the floor
        if PLAYER.y + PLAYER_SIZE >= FLOOR_HEIGHT {
            PLAYER.y = FLOOR_HEIGHT - PLAYER_SIZE;
            PLAYER.velocity_y = 0;
            PLAYER.is_jumping = false;
        }

        // Limit the Player on the screen
        if PLAYER.x < 0 {
            PLAYER.x = 0;
        }
        if PLAYER.y < 0 {
            PLAYER.y = 0;
        }
        if PLAYER.x > SCREEN_SIZE as i32 - PLAYER_SIZE {
            PLAYER.x = SCREEN_SIZE as i32 - PLAYER_SIZE;
        }
        if PLAYER.y > FLOOR_HEIGHT - PLAYER_SIZE {
            PLAYER.y = FLOOR_HEIGHT - PLAYER_SIZE;
        }
    }
}

fn check_player_death() {
    unsafe {
        if PLAYER.lives == 0 {
                GAME_OVER = true;
        }
    }
}

fn update_player() {
    update_player_position();
    check_player_death();
}

fn update_coin() {
    unsafe {
        COIN.x -= COIN_SPEED;
        if COIN.x + COIN_SIZE < 0 {
            COIN.x = SCREEN_SIZE as i32 + 20;
            COIN.not_collected = true;
            COIN.y = random_range(COIN_MAX_Y, COIN_MIN_Y);
        }
    }
}

fn update_barriers() {
    unsafe {
        BARRIERS[0].x -= SCENARIO_SPEED;
        BARRIERS[1].x -= SCENARIO_SPEED;

        if BARRIERS[0].x + BARRIER_WIDTH < 0 {
            BARRIERS[0].x = SCREEN_SIZE as i32 + 20 + random_range(-BARRIER_DISPLACEMENT, BARRIER_DISPLACEMENT);
            BARRIERS[0].active = true;
            BARRIERS[0].y = BARRIER_DOWN_HEIGHT + random_range(-BARRIER_DISPLACEMENT, BARRIER_DISPLACEMENT);
            BARRIERS[0].height = FLOOR_HEIGHT - BARRIERS[0].y;
        }
        if BARRIERS[1].x + BARRIER_WIDTH < 0 {
            BARRIERS[1].x = BARRIERS[0].x + BARRIER_GAP + random_range(-BARRIER_DISPLACEMENT, BARRIER_DISPLACEMENT);
            BARRIERS[1].active = true;
            BARRIERS[1].height = BARRIER_UP_HEIGHT + random_range(-BARRIER_DISPLACEMENT, BARRIER_DISPLACEMENT);
        }
    }
}

fn update_ball() {
    unsafe {
        BALL.x -= BALL_X_SPEED;
        if BALL.y <= SCREEN_SIZE as i32 {
            if BALL.rising {
                BALL.y -= BALL_Y_SPEED
            } else {
                BALL.y += BALL_Y_SPEED
            }
        }

        if BALL.x + BALL_SIZE < 0 {
            BALL.x = SCREEN_SIZE as i32 + BALL_SIZE + 30;
            BALL.y = random_range(0, FLOOR_HEIGHT);
            if BALL.y < FLOOR_HEIGHT / 2 {
                BALL.rising = false
            } else {
                BALL.rising = true
            }
            BALL.active = true;
        }
    }
}

fn update_ground_x() {
    unsafe {
        GROUND_X -= SCENARIO_SPEED;
        if GROUND_X + GROUND_LENGTH < 0 {
            GROUND_X = 0;
        }
    }
}

fn player_coin_interaction() {
    unsafe {
        if COIN.not_collected && collision(PLAYER.x, PLAYER.y, PLAYER_SIZE, PLAYER_SIZE, COIN.x, COIN.y, COIN_SIZE, COIN_SIZE){
            COIN.not_collected = false;
            PLAYER.score += 1;
        }
    }
}

fn player_barrier_interaction() {
    unsafe {
        if BARRIERS[0].active && collision(PLAYER.x, PLAYER.y, PLAYER_SIZE, PLAYER_SIZE, BARRIERS[0].x, BARRIERS[0].y, BARRIER_WIDTH, BARRIERS[0].height) {
            PLAYER.lives = PLAYER.lives.saturating_sub(1);
            BARRIERS[0].active = false;
        }
        if BARRIERS[1].active && collision(PLAYER.x, PLAYER.y, PLAYER_SIZE, PLAYER_SIZE, BARRIERS[1].x, BARRIERS[1].y, BARRIER_WIDTH, BARRIERS[1].height) {
            PLAYER.lives = PLAYER.lives.saturating_sub(1);
            BARRIERS[1].active = false;
        }
    }
}

fn player_ball_interaction() {
    unsafe {
        if BALL.active && collision(PLAYER.x, PLAYER.y, PLAYER_SIZE, PLAYER_SIZE, BALL.x, BALL.y, BALL_SIZE, BALL_SIZE) {
            PLAYER.lives = PLAYER.lives.saturating_sub(1);
            BALL.active = false;
        }
    }
}

fn game_active_update() {
    update_player();
    update_coin();
    update_barriers();
    update_ball();
    update_ground_x();
    player_coin_interaction();
    player_barrier_interaction();
    player_ball_interaction();
}

// Draw Functions ----------------------------------------------------------------------------------------------------------
fn draw_sky() {
    // Sky
    unsafe { *DRAW_COLORS = 4 }
    rect(0, 0, 160, FLOOR_HEIGHT as u32);
    
    // Sun
    unsafe { *DRAW_COLORS = 3 }
    oval(10,20, 29, 29);

    // Clouds
    unsafe {
        *DRAW_COLORS = 0x03;
        blit(
            &[ 0xff,0xff,0x0f,0xff,0xff,0xf8,0x07,0xff,0xff,0xe3,0xe7,0xff,0xff,0x9c,0x07,0xff,0xff,0x20,0x0f,0xff,0xfc,0x00,0x0f,0xfe,0x18,0x00,0x1f,0xf0,0x00,0x00,0x3f,0xcc,0x10,0x00,0x7f,0x30,0x30,0x00,0x7e,0xc0,0x20,0x00,0x39,0x00,0x40,0x00,0x32,0x00,0x00,0x38,0x24,0x00,0x00,0xc0,0x48,0x00,0x03,0x00,0x40,0x00,0x04,0x00,0x80,0x00,0x08,0x01,0x80,0x00,0x00,0x03,0x80,0x00,0x00,0x0f,0xc3,0x00,0x00,0x1f,0xff,0x00,0x00,0x7f,0xff,0x86,0x01,0xff,0xff,0xff,0x0f,0x80 ],
            66,
            19,
            31,
            23,
            BLIT_1BPP,
        );
        blit(
            &[ 0xff,0xf8,0x7f,0xff,0xff,0xf8,0x07,0xff,0xff,0xfc,0x30,0xff,0xff,0xfe,0x18,0x1f,0xff,0xff,0x8c,0x00,0x7f,0xff,0xc6,0x00,0x07,0xff,0xf1,0x00,0x00,0xff,0xfc,0x00,0x00,0x0f,0xff,0x00,0x00,0x01,0xfe,0x00,0x00,0x00,0x3e,0x00,0x00,0xe0,0x07,0x00,0x00,0xe0,0x09,0x86,0x00,0x60,0x02,0x23,0x00,0x30,0x00,0x41,0x80,0x08,0x00,0x10,0x40,0x06,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0xf8,0x04,0x00,0x00,0x7f,0x87,0x80,0x00,0x7f,0xff,0xf8,0x03,0xff ],
            119,
            32,
            34,
            24,
            BLIT_1BPP,
        );
    }
}

fn draw_ground() {
    unsafe {
        *DRAW_COLORS = 0x12;
        blit(
            &[ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xf0,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x03,0xff,0xfe,0x00,0x01,0xff,0xe0,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x3f,0xff,0xe0,0x00,0x1f,0xfe,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xf0,0xf0,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x3f,0xff,0xff,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xf0,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x3f,0xff,0xe0,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x03,0xff,0xfe,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x00,0x00,0x00,0x01,0xff,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x07,0xff,0xff,0xff,0xff,0xff,0xfe,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x07,0xfc,0x07,0xff,0xe0,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x7f,0xc0,0x7f,0x01,0xff,0xff,0xff,0xff,0xf0,0x3f,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xf8,0xff,0xf8,0x00,0x1f,0xff,0xff,0xff,0xff,0x03,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0x8f,0xff,0x80,0xff,0xff,0xff,0xff,0xf8,0x0f,0xff,0xfe,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0xff,0xff,0xe0,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x00,0x3f,0xff,0xff,0x00,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x03,0xff,0xff,0xf0,0x0f,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff ],
            GROUND_X,
            FLOOR_HEIGHT,
            (GROUND_LENGTH * 2) as u32,
            SCREEN_SIZE - FLOOR_HEIGHT as u32,
            BLIT_1BPP,
        );
    }
}

fn draw_barriers() {
    unsafe {
        *DRAW_COLORS = 0x4123;
        if BARRIERS[0].active {
            blit(
                &[ 0xc0,0x00,0x03,0x0a,0xaa,0xa0,0x2a,0x00,0xa8,0x0a,0xaa,0xa0,0x40,0x00,0x01,0x55,0x55,0x55,0x55,0x55,0x15,0x51,0x55,0x15,0x51,0x55,0x45,0x51,0x55,0x45,0x54,0x55,0x45,0xd4,0x55,0x47,0xd4,0x55,0x47,0xd5,0x55,0x57,0xd5,0x55,0x57,0x51,0x55,0x17,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x55,0x55,0x15,0x55,0x55,0x15,0x54,0x54,0x55,0x54,0x54,0x55,0x54,0x54,0x55,0x54,0x54,0x55,0xd4,0x54,0x57,0xd5,0x15,0x57,0xd5,0x15,0x57,0xd5,0x15,0x55,0xd5,0x15,0x55,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x55,0x45,0x55,0x55,0x45,0x55,0x55,0x45,0x45,0x55,0x45,0x45,0x55,0x45,0x45,0x55,0x45,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x51,0x17,0x55,0x51,0x57,0x55,0x51,0x57,0x55,0x54,0x55,0x54,0x54,0x55,0xd4,0x54,0x45,0xd4,0x54,0x45,0xd4,0x55,0x51,0xd4,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x51,0x55,0x51,0x51,0x55,0x51,0x51,0x55,0x15,0x51,0x55,0x15,0x51,0x55,0x15,0x55,0x54,0x57,0x55,0x54,0x57,0xd5,0x54,0x57,0xd1,0x54,0x57,0xd1,0x54,0x57,0xd1,0x55,0x57,0xd1,0x55,0x55,0x51,0x55,0x55,0x51,0x51,0x55,0x51,0x51,0x55,0x51,0x54,0x57,0x51,0x54,0x57,0x54,0x54,0x55,0x54,0x55,0x55,0xd4,0x55,0x55,0xd4,0x55,0x51,0xd4,0x55,0x51,0x55,0x51,0x51,0x45,0x51,0x51,0x45,0x51,0x45,0x45,0x51,0x45,0x45,0x51,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x55,0x57,0x51,0x55,0x57,0x51,0x55,0x17,0x51,0x55,0x17,0x51,0x55,0x47,0x51,0x55,0x45,0xd4,0x55,0x45,0xd4,0x55,0x45,0xd4,0x55,0x45,0xd5,0x55,0x55,0xd5,0x55,0x57,0x51,0x55,0x17,0x45,0x55,0x17,0x45,0x55,0x15,0x45,0x55,0x15,0x55,0x55,0x15,0x55,0x55,0x17,0x54,0x54,0x57,0x54,0x54,0x57,0x54,0x54,0x57,0xd4,0x54,0x57,0xd4,0x54,0x55,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd5,0x15,0x55,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45 ],
                BARRIERS[0].x,
                BARRIERS[0].y,
                BARRIER_WIDTH as u32,
                116,
                BLIT_2BPP,
            );
        }
        if BARRIERS[1].active {
            blit(
                &[ 0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd4,0x54,0x55,0xd4,0x54,0x57,0x54,0x54,0x57,0x54,0x54,0x57,0x54,0x54,0x57,0x55,0x55,0x17,0x55,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x17,0x51,0x55,0x17,0xd5,0x55,0x57,0xd5,0x55,0x55,0xd4,0x55,0x45,0xd4,0x55,0x45,0xd4,0x55,0x45,0x51,0x55,0x45,0x51,0x55,0x47,0x51,0x55,0x17,0x51,0x55,0x17,0x51,0x55,0x57,0x51,0x55,0x57,0x51,0x54,0x55,0x51,0x54,0x55,0x45,0x51,0x55,0x45,0x51,0x45,0x45,0x51,0x45,0x45,0x51,0x51,0x55,0x51,0x51,0xd4,0x55,0x51,0xd4,0x55,0x51,0xd4,0x55,0x55,0x54,0x55,0x55,0x54,0x54,0x55,0x51,0x54,0x57,0x51,0x54,0x57,0x51,0x51,0x55,0x51,0x51,0x55,0x51,0x55,0x55,0xd1,0x55,0x55,0xd1,0x55,0x57,0xd1,0x54,0x57,0xd1,0x54,0x57,0xd5,0x54,0x57,0x55,0x54,0x57,0x55,0x54,0x57,0x51,0x55,0x15,0x51,0x55,0x15,0x51,0x55,0x15,0x51,0x55,0x51,0x51,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0x54,0x55,0x51,0xd4,0x55,0x51,0xd4,0x55,0x51,0xd4,0x54,0x45,0xd4,0x54,0x45,0x54,0x54,0x55,0x55,0x54,0x55,0x55,0x51,0x57,0x55,0x51,0x57,0x45,0x51,0x17,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x45,0x45,0x55,0x45,0x45,0x55,0x45,0x55,0x55,0x45,0x55,0x55,0x45,0x55,0x55,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0xd5,0x15,0x55,0xd5,0x15,0x55,0xd5,0x15,0x57,0xd5,0x15,0x57,0xd4,0x54,0x57,0x54,0x54,0x55,0x54,0x54,0x55,0x54,0x54,0x55,0x54,0x54,0x55,0x55,0x55,0x15,0x55,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x45,0x55,0x15,0x51,0x55,0x17,0xd5,0x55,0x57,0xd5,0x55,0x57,0xd4,0x55,0x47,0xd4,0x55,0x47,0x54,0x55,0x45,0x51,0x55,0x45,0x51,0x55,0x45,0x51,0x55,0x15,0x55,0x55,0x15,0x55,0x55,0x55,0x40,0x00,0x01,0x0a,0xaa,0xa0,0x2a,0x00,0xa8,0x0a,0xaa,0xa0,0xc0,0x00,0x03 ],
                BARRIERS[1].x,
                BARRIERS[1].y,
                BARRIER_WIDTH as u32,
                116,
                BLIT_2BPP,
            );
        }
    }
}

fn draw_coin() {
    unsafe {
        if COIN.not_collected {
            *DRAW_COLORS = 0x0121;
            blit(
                &[ 0xfc,0x03,0xff,0x05,0x0f,0xc1,0x54,0x30,0x65,0x90,0x15,0xa5,0x41,0x59,0x54,0x06,0xa9,0x0c,0x15,0x43,0xf0,0x50,0xff,0xc0,0x3f ],
                COIN.x,
                COIN.y,
                COIN_SIZE as u32,
                COIN_SIZE as u32,
                BLIT_2BPP,
            );
        }
    }
}

fn draw_player() {
    unsafe {
        *DRAW_COLORS = 0x0123;
        blit(
            &[ 0xd5,0x5f,0x55,0x57,0x78,0x8f,0xda,0xac,0xd5,0xa2,0xd6,0xa8,0xda,0xa4,0x59,0x9f ],
            PLAYER.x,
            PLAYER.y,
            PLAYER_SIZE as u32,
            PLAYER_SIZE as u32,
            BLIT_2BPP,
        );
    }
}

fn draw_ball() {
    unsafe {
        *DRAW_COLORS = 0x0123;
        if BALL.active {
            if BALL.rising {
                blit(
                    &[ 0xc0,0x03,0xf0,0x54,0x0f,0x29,0xa0,0x31,0x99,0x40,0x15,0x54,0x00,0x55,0x40,0xc1,0x50,0xcc,0x00,0x30,0xf0,0x0c,0xcf,0xc0,0x03 ],
                    BALL.x,
                    BALL.y,
                    BALL_SIZE as u32,
                    BALL_SIZE as u32,
                    BLIT_2BPP,
                )
            } else {
                blit(
                    &[ 0xfc,0x00,0x3f,0x00,0xcc,0xc0,0x03,0x0c,0x15,0x0c,0x05,0x54,0x00,0x55,0x40,0x29,0xa4,0x01,0x99,0x03,0x05,0x40,0xfc,0x00,0x3f ],
                    BALL.x,
                    BALL.y,
                    BALL_SIZE as u32,
                    BALL_SIZE as u32,
                    BLIT_2BPP,
                )
            }
        }
    }
}

fn draw_hud() {
    unsafe {
        *DRAW_COLORS = 1;
        let coins_qnty = PLAYER.score;
        let coins_text = format!("Coins: {}", coins_qnty);
        text(&coins_text, 10, 10);

        let lives_qnty = PLAYER.lives;
        let lives_text = format!("Lives: {}", lives_qnty);
        text(&lives_text, 10, 20);
    }
}

fn draw_game_active_screen() {
    draw_sky();
    draw_barriers();
    draw_coin();
    draw_ground();
    draw_player();
    draw_ball();
    draw_hud();
}

fn draw_game_over_screen() {
    unsafe {
        // Draw Background
        *DRAW_COLORS = 1;
        rect(0, 0, SCREEN_SIZE, SCREEN_SIZE);

        // Draw Title
        *DRAW_COLORS = 0x0234;
        blit(
            &[ 0xff,0xff,0xff,0x03,0xff,0xff,0xc1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x54,0x3f,0xff,0x15,0x7f,0xff,0xfc,0x7f,0xf1,0xff,0xff,0xfc,0x01,0xff,0xff,0xff,0xff,0xf1,0x55,0x5f,0xff,0x15,0x5f,0xff,0xf1,0x5f,0xc5,0x7f,0xff,0xc5,0x55,0x7f,0xff,0xff,0xff,0xc5,0xfd,0x7f,0xff,0x5f,0x57,0xff,0xc1,0x57,0x15,0x7f,0xff,0x15,0xff,0x5f,0xff,0xff,0xff,0x17,0xff,0xff,0xfc,0x5f,0x17,0xff,0xc5,0x54,0x1d,0x5f,0xfc,0x5f,0xff,0x5f,0xff,0xff,0xfc,0x5f,0xff,0xff,0xfc,0x53,0x17,0xff,0xc5,0xd4,0x5d,0x5f,0xf1,0x7f,0x01,0x5f,0xff,0xff,0xf1,0x7f,0xc1,0xff,0xfc,0x54,0x57,0xff,0xd5,0xd4,0x5d,0x5f,0xf1,0xf0,0x55,0xff,0xff,0xff,0xf1,0x7f,0x15,0x7f,0xf1,0x55,0x55,0xff,0x17,0xd5,0x7f,0x57,0xf1,0x45,0x7f,0xff,0xff,0xff,0xf1,0x7f,0x7d,0x5f,0xf5,0x7d,0x55,0xff,0x17,0xf5,0xff,0x17,0xf5,0x57,0xfc,0x1f,0xff,0xfe,0xa5,0x5f,0xf1,0x57,0xc5,0xff,0xc5,0x7f,0x17,0xff,0xff,0x17,0xf5,0x7f,0xc5,0x5f,0xff,0xea,0xa9,0x54,0x05,0xd7,0xc5,0xff,0xc5,0x7c,0x57,0xff,0xff,0x15,0xfd,0x50,0x15,0x7f,0xff,0xaa,0xaa,0x55,0x57,0xf6,0x95,0xea,0xf1,0x7d,0x5f,0xea,0xab,0xc5,0xe9,0x55,0x57,0xfa,0xab,0xaa,0xaa,0xa5,0x5a,0xaa,0xa5,0xaa,0xa9,0x69,0x6a,0xaa,0xaa,0x86,0xaa,0x95,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xaa,0xaa,0xa8,0x00,0x6a,0xa8,0x2a,0xa8,0x5a,0xa0,0x01,0xaa,0xa8,0x05,0x6a,0xaa,0xff,0xff,0xff,0xff,0xa1,0x55,0x5a,0xa1,0x6a,0xa8,0x5a,0x85,0x55,0x7f,0xa1,0x55,0x5e,0xaf,0xff,0xff,0xff,0xff,0xc5,0x7d,0x56,0xb5,0x5f,0xa1,0x7e,0x17,0xfd,0x5f,0xf1,0x7f,0x17,0xff,0xff,0xff,0xff,0xff,0x17,0xff,0x55,0xfc,0x5f,0xc5,0x7c,0x5f,0xff,0x57,0xfd,0x7f,0xc7,0xff,0xff,0xff,0xff,0xfc,0x5f,0xff,0xd5,0x7c,0x5f,0xc5,0xfc,0x57,0xff,0xc7,0xfc,0x5f,0x17,0xff,0xff,0xff,0xff,0xfc,0x5f,0xff,0xf5,0x7c,0x57,0x17,0xfc,0x55,0x03,0xc7,0xff,0x10,0x5f,0xff,0xff,0xff,0xff,0xfc,0x5f,0xff,0xf5,0x7f,0x57,0x17,0xfc,0x55,0x54,0x17,0xff,0x15,0x7f,0xff,0xff,0xff,0xff,0xfc,0x5f,0xff,0xf1,0x7f,0x17,0x1f,0xfc,0x5f,0x55,0x5f,0xfc,0x55,0xff,0xff,0xff,0xff,0xab,0xfd,0x5f,0xff,0xf1,0x7f,0x15,0x5f,0xfd,0x5f,0xff,0xff,0xfc,0x55,0x7f,0xff,0xff,0xfe,0xaa,0xaa,0x57,0xff,0xc5,0xff,0xd5,0x5f,0xfd,0x57,0xff,0x07,0xf1,0x7d,0x5f,0xff,0xff,0xfe,0xaa,0xaa,0x54,0xac,0x17,0xff,0xc5,0x5f,0xff,0x55,0x00,0x57,0xf1,0xff,0x5f,0xea,0xab,0xfe,0xaa,0xaa,0x95,0x01,0x5f,0xfa,0x85,0x6a,0xaf,0xd5,0x55,0x5a,0xc5,0xab,0x56,0xaa,0xaa,0xff,0xaa,0xaa,0xa9,0x55,0x6a,0xaa,0xa5,0xaa,0xaa,0xa9,0x56,0xaa,0x96,0xaa,0x96,0xaa,0xaa,0xff,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xff,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaf,0xff,0xff,0xff,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xbf,0xea,0xaa,0xff,0xfe,0xaa,0xff,0xff,0xff ],
            44,
            20,
            72,
            35,
            BLIT_2BPP
        );

        // Draw Fireball
        *DRAW_COLORS = 0x1234;
        blit(
            &[ 0xff,0xf5,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xdf,0xd7,0xff,0xff,0xff,0xff,0xff,0x7f,0x1f,0xff,0xff,0xff,0xff,0xf5,0xf1,0xff,0xff,0xff,0xff,0xff,0x5f,0xdf,0xff,0xff,0xff,0xff,0xfd,0x7f,0xff,0xff,0xff,0xff,0xff,0xf5,0x7f,0xff,0xff,0xff,0xff,0xff,0x55,0x5f,0xff,0xff,0xff,0xff,0xfd,0x51,0x5f,0xff,0xff,0xff,0xff,0xf5,0x05,0x5f,0xff,0xff,0xff,0xff,0xd4,0x01,0x57,0xff,0xff,0xff,0xff,0x50,0x01,0x55,0xff,0xff,0xff,0xff,0x50,0x00,0x55,0x5f,0xff,0xff,0xfd,0x40,0x00,0x05,0x57,0xff,0xff,0xf5,0x00,0x00,0x00,0x55,0xff,0xff,0xd5,0x00,0x00,0x00,0x15,0xff,0xff,0xd4,0x00,0x00,0x00,0x05,0x7f,0xff,0x50,0x00,0x00,0x00,0x01,0x7f,0xfd,0x50,0x00,0x00,0x55,0x41,0x7f,0xf5,0x40,0x00,0x05,0x55,0x51,0x7f,0xf5,0x00,0x00,0x56,0xaa,0x55,0x7f,0xd5,0x00,0x05,0x6a,0xaa,0x55,0xff,0x54,0x00,0x56,0xaa,0xaa,0x55,0xff,0x50,0x01,0x6a,0xaa,0xaa,0x57,0xfd,0x50,0x06,0xab,0xfb,0xfa,0x5f,0xf5,0x40,0x5a,0xaa,0xea,0xe9,0x7f,0xf5,0x01,0x6a,0xaf,0xaf,0xa5,0xff,0xd5,0x05,0xaa,0xaa,0xaa,0x97,0xff,0xd4,0x16,0xaf,0xaa,0xaa,0x7f,0xff,0xd4,0x16,0xbf,0xea,0xa5,0xff,0xff,0xd4,0x16,0xbf,0xaa,0x5f,0xff,0xff,0xd4,0x16,0xaa,0xa5,0xff,0xff,0xff,0xd4,0x16,0xaa,0x5f,0xff,0xff,0xff,0xd5,0x55,0x55,0xff,0xff,0xff,0xff,0xf5,0x55,0x7f,0xff ],
            80,
            85,
            27,
            36,
            BLIT_2BPP
        );

        // Draw Barrier
        *DRAW_COLORS = 0x0123;
        blit(
            &[ 0xff,0xf0,0x03,0xff,0xff,0x02,0xaa,0x03,0xfc,0x2a,0x80,0xaa,0x0c,0x28,0x02,0x00,0xa0,0x0a,0x00,0x80,0x28,0x10,0xaa,0x02,0xa8,0x15,0x40,0xaa,0x80,0x54,0x55,0x40,0x05,0x55,0xc5,0x55,0x55,0x54,0xf1,0x15,0x45,0x15,0x3d,0x45,0x51,0x45,0x4d,0x51,0x55,0x51,0x54,0x54,0x55,0x54,0x55,0x14,0x54,0x55,0x15,0x55,0x15,0x15,0x51,0x5d,0x45,0x45,0x54,0x57,0x51,0x51,0x55,0x14,0xd4,0x54,0x51,0x45,0x35,0x55,0x14,0x51,0x4d,0x55,0x45,0x14,0x51,0xd1,0x51,0x45,0x55,0x34,0x55,0x51,0x55,0x4c,0x55,0x54,0x54,0x53,0x14,0x55,0x15,0x14,0xc5,0x15,0x45,0x45,0x71,0x45,0x45,0x51,0x75,0x51,0x51,0x54,0x5d,0x55,0x54,0x55,0x17,0x55,0x55,0x15,0x45,0x45,0x14,0x45,0x14,0x51,0x45,0x15,0x45,0x17,0x11,0x45,0x51,0x47,0xc5,0x11,0x54,0x51,0xc0 ],
            86,
            127,
            17,
            33,
            BLIT_2BPP
        );

        // Draw Cane
        *DRAW_COLORS = 0x0012;
        blit(
            &[ 0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0x00,0x00,0x02,0xaa,0xaa,0xaa,0xa8,0x01,0x00,0x00,0xaa,0xaa,0xaa,0xa8,0x00,0x50,0x00,0xaa,0xaa,0xaa,0xa8,0x00,0x10,0x00,0xaa,0xaa,0xaa,0xa8,0x00,0x01,0x00,0xaa,0xaa,0xaa,0xa8,0x14,0x00,0x50,0xaa,0xaa,0xaa,0xaa,0x01,0x00,0x12,0xaa,0xaa,0xaa,0xaa,0x00,0x40,0x0a,0xaa,0xaa,0xaa,0xa8,0x40,0x00,0x2a,0xaa,0xaa,0xaa,0xa8,0x10,0x00,0xaa,0xaa,0xaa,0xaa,0xa0,0x05,0x2a,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x2a,0xaa,0xaa,0xaa,0x8a,0xaa,0x00,0x2a,0xaa,0xaa,0xaa,0x0a,0xaa,0x80,0xaa,0xaa,0xaa,0xaa,0x2a,0xaa,0x80,0xaa,0xaa,0xaa,0xaa,0xaa,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x2a,0xaa,0xaa,0xaa,0xaa,0x8a,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0x8a,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0x0a,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0x2a,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x2a,0xaa,0xaa,0xaa,0xaa,0xa8,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0x00,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0x80,0x02,0xaa,0xaa,0xaa,0xaa,0xaa,0xa0,0x0a,0xaa,0xaa,0xaa,0xaa,0xaa,0xa8,0x2a,0xaa,0xaa ],
            124,
            94,
            28,
            60,
            BLIT_2BPP
        );

        // Draw Coins
        *DRAW_COLORS = 0x0012;
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 7, 143, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 16, 155, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 20, 148, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 32, 142, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 36, 152, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 51, 145, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 59, 154, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 64, 140, 7, 3, BLIT_2BPP);
        blit(&[ 0x80,0x08,0x15,0x08,0x00,0x80 ], 72, 149, 7, 3, BLIT_2BPP);

        // Draw Text
        *DRAW_COLORS = 4;
        let score = PLAYER.score;
        text(format!("Your score was {}!", score), 3, 65);
        text("Press Z", 3, 100);
        text("to", 3, 110);
        text("restart!", 3, 120);
    }
}

fn draw_menu_screen() {
    unsafe {
        // Draw Background
        *DRAW_COLORS = 1;
        rect(0, 0, SCREEN_SIZE, SCREEN_SIZE);

        // Draw Title
        *DRAW_COLORS = 0x0234;
        blit(
            &[ 0xff,0xff,0xc3,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0xff,0x00,0x00,0x5f,0x0f,0xc7,0xf0,0x01,0xff,0xff,0xfc,0x3f,0xc3,0xff,0x00,0x3f,0xf4,0x3f,0xff,0xc3,0xf0,0xff,0xff,0x17,0xf1,0x55,0x55,0x7d,0x7f,0x1f,0x15,0x55,0xff,0xff,0xf5,0xff,0x5f,0xf1,0x55,0x3f,0x55,0x4c,0x3f,0x4f,0x17,0xff,0xd1,0x5f,0xc5,0x55,0x5f,0xc5,0xf1,0x7c,0x7f,0x57,0xff,0xff,0xd7,0xfd,0x4f,0xc5,0xf5,0x3d,0x7d,0x55,0xf1,0x4d,0x5f,0xfc,0x5d,0x7f,0x5f,0x57,0xff,0x1f,0xc7,0xc5,0xff,0xff,0xff,0xfc,0x5c,0x3d,0x4f,0x5f,0xf5,0xf5,0xfd,0x5f,0xc5,0x45,0x4f,0xc7,0xf5,0xff,0xfd,0x5f,0xfd,0x7c,0x5f,0x1f,0x07,0xff,0xff,0xf1,0xf5,0x3d,0x7d,0x70,0x54,0xd4,0xff,0xff,0x55,0x55,0x7d,0x7f,0x17,0xff,0xf5,0x7f,0xf5,0x05,0x7d,0x51,0x5f,0xff,0xff,0xd5,0xf5,0xf5,0x75,0x15,0xd7,0xd4,0x3f,0xf1,0x75,0x75,0x35,0x41,0x7f,0xff,0x15,0xff,0xd5,0x57,0xf5,0x57,0xff,0xff,0xff,0x54,0xd7,0x15,0xd5,0x7f,0x5f,0xd5,0x4f,0xc5,0xf5,0xf5,0xfd,0x55,0xff,0xfd,0x5f,0xfc,0x5f,0x5f,0xf5,0x7f,0xc7,0xff,0xff,0x54,0x55,0x57,0x57,0xf1,0xf3,0xfd,0x5f,0x5f,0xff,0xd7,0xff,0xd4,0xab,0xe5,0x6a,0xf5,0xfd,0x7f,0xf5,0x40,0x5a,0xbf,0xfa,0x55,0x55,0x6a,0x53,0x17,0xd4,0x05,0x61,0x7f,0xaa,0x53,0xea,0x96,0xae,0x95,0xaa,0x96,0xa5,0xaa,0x95,0x55,0xaa,0xbf,0xaa,0x5a,0x96,0xaa,0x59,0x6a,0x95,0x5a,0x96,0xaa,0xaa,0x5a,0xaa,0x5a,0xba,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xbf,0xff,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xbf,0xfa,0xaa,0xaa,0xaa,0xaa,0x94,0x0a,0x83,0xff,0x03,0xff,0xfa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xff,0xfe,0xaa,0xaa,0xaa,0x80,0x55,0x7f,0x53,0xfd,0x5f,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaf,0xff,0xff,0xff,0xff,0xfc,0x55,0x5f,0xfd,0x5f,0xc5,0xff,0xff,0x00,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xaa,0xaa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xc5,0x7f,0xff,0xfd,0x7f,0x5f,0xff,0xf1,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x5f,0xff,0xff,0xf5,0x35,0x7f,0xff,0x17,0x53,0xff,0xc3,0xfc,0x4f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5,0xd7,0xff,0xfc,0x7f,0x4f,0xff,0x13,0xc5,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x3c,0x3f,0xff,0xd5,0x7f,0xff,0xc7,0xfd,0x7f,0xf1,0x53,0x15,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x45,0xff,0xff,0xd5,0xff,0xff,0x5f,0x05,0xff,0xc5,0x55,0x75,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x5f,0xff,0xfc,0x54,0xff,0xfd,0x41,0x54,0xff,0x1d,0x57,0xf4,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x57,0xff,0xff,0xc5,0xd4,0xff,0xc5,0x57,0xd7,0xf1,0x7d,0x7f,0xd7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x7f,0xc0,0xff,0x17,0xd3,0xff,0x55,0xff,0x5f,0xc5,0xff,0xff,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x55,0xfc,0x57,0xf1,0x7f,0x53,0xf1,0x5f,0xf1,0x7c,0x5f,0xff,0xf5,0x7e,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xea,0x55,0x55,0x7f,0x55,0xff,0x53,0xd5,0xff,0x15,0xf1,0xff,0xaa,0x56,0xaa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0x55,0x56,0xa8,0x5a,0xa9,0x5a,0x56,0xa9,0x5a,0x96,0xaa,0xa9,0x6a,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xea,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc0 ],
            35,
            11,
            95,
            35,
            BLIT_2BPP
        );

        // Draw Barriers
        *DRAW_COLORS = 0x0123;
        blit(
            &[ 0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x15,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc1,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc5,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x05,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x50,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x05,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x05,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x50,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x55,0x55,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x55,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x55,0x55,0x41,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x15,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xc5,0x55,0x55,0x41,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x55,0x55,0x54,0x15,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x05,0x55,0x55,0x41,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x50,0x55,0x55,0x54,0x15,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x05,0x55,0x55,0x41,0x55,0x50,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x54,0x15,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x55,0x55,0x45,0x55,0x51,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x55,0x55,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x55,0x55,0x55,0x55,0x55,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x55,0x55,0x55,0x50,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x55,0x55,0x55,0x55,0x55,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x15,0x55,0x55,0x55,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x41,0x55,0x55,0x55,0x50,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x15,0x55,0x55,0x55,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x41,0x55,0x55,0x55,0x50,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x15,0x55,0x55,0x55,0x17,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x41,0x55,0x55,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x15,0x55,0x55,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x15,0x55,0x41,0x55,0x55,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x54,0x15,0x55,0x54,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x41,0x55,0x55,0x05,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x54,0x15,0x55,0x50,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x41,0x55,0x55,0x05,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x54,0x15,0x55,0x50,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x41,0x55,0x55,0x05,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x54,0x15,0x55,0x50,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x41,0x55,0x55,0x05,0x55,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x54,0x15,0x55,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x45,0x55,0x55,0x05,0x54,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x55,0x55,0x55,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x15,0x55,0x15,0x55,0x55,0x05,0x54,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0x55,0x41,0x55,0x15,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x54,0x15,0x41,0x55,0x05,0x54,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x41,0x54,0x15,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x54,0x15,0x41,0x55,0x05,0x54,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x41,0x54,0x15,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x54,0x54,0x15,0x41,0x55,0x05,0x54,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x45,0x54,0x15,0x50,0x55,0x43,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x41,0x55,0x05,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x55,0x54,0x15,0x50,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x55,0x55,0x55,0x05,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x55,0x55,0x55,0x55,0x55,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x05,0x55,0x55,0x55,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x50,0x55,0x55,0x54,0x00,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x05,0x55,0x54,0x2a,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x05,0x50,0x55,0x54,0x28,0xa1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x50,0x55,0x05,0x54,0x28,0x28,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x50,0x54,0x28,0x28,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x14,0x28,0x08,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x54,0x28,0x0a,0x17,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x54,0x28,0x0a,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x54,0x28,0x0a,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x28,0x0a,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x08,0x2a,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x42,0xa8,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x54,0x28,0x15,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfd,0x40,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x5f,0xff,0xff ],
            0,
            23,
            69,
            84,
            BLIT_2BPP
        );
        blit(
            &[ 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x4f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf4,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x41,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x5f,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55,0x55,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x50,0x55,0x5f,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x05,0x55,0x3f,0xff,0xff,0xff,0xff,0xff,0x55,0x50,0x55,0x50,0xff,0xff,0xff,0xff,0xff,0xf5,0x55,0x05,0x55,0x07,0xff,0xff,0xff,0xff,0xff,0x55,0x50,0x55,0x50,0x5f,0xff,0xff,0xff,0xff,0xf5,0x55,0x05,0x55,0x05,0x7f,0xff,0xff,0xff,0xff,0x15,0x50,0x55,0x55,0x55,0xff,0xff,0xff,0xff,0xf0,0x55,0x05,0x55,0x55,0x57,0xff,0xff,0xff,0xff,0x05,0x50,0x55,0x55,0x55,0x5f,0xff,0xff,0xff,0xf0,0x55,0x05,0x55,0x55,0x55,0x7f,0xff,0xff,0xff,0x05,0x50,0x55,0x55,0x55,0x55,0xff,0xff,0xff,0xf0,0x55,0x05,0x55,0x55,0x41,0x57,0xff,0xff,0xff,0x05,0x50,0x55,0x55,0x54,0x15,0x5f,0xff,0xff,0xf0,0x55,0x05,0x55,0x55,0x41,0x55,0x7f,0xff,0xff,0x05,0x50,0x55,0x55,0x54,0x15,0x55,0xff,0xff,0xf0,0x55,0x05,0x55,0x55,0x41,0x55,0x57,0xff,0xff,0x05,0x50,0x55,0x55,0x54,0x15,0x55,0x4f,0xff,0xf0,0x55,0x05,0x55,0x55,0x51,0x55,0x54,0x3f,0xff,0x55,0x50,0x55,0x41,0x55,0x55,0x55,0x43,0xff,0xf5,0x55,0x05,0x54,0x15,0x55,0x55,0x54,0x3f,0xff,0x55,0x50,0x55,0x41,0x55,0x55,0x55,0x43,0xff,0xf5,0x55,0x05,0x54,0x15,0x55,0x55,0x54,0x3f,0xff,0x55,0x54,0x55,0x41,0x55,0x55,0x55,0x53,0xff,0xf5,0x55,0x55,0x54,0x15,0x55,0x55,0x55,0x7f,0xff,0xd5,0x55,0x55,0x41,0x55,0x55,0x55,0x57,0xff,0xfd,0x41,0x55,0x54,0x15,0x55,0x54,0x55,0x7f,0xff,0xd4,0x00,0x55,0x51,0x55,0x55,0x41,0x57,0xff,0xff,0x42,0xa0,0x55,0x55,0x55,0x54,0x15,0x7f,0xff,0xfd,0x28,0xa0,0x55,0x55,0x55,0x41,0x57,0xff,0xff,0xf4,0xa0,0xa0,0x55,0x55,0x54,0x15,0x7f,0xff,0xff,0xd4,0xa0,0xa0,0x55,0x55,0x41,0x57,0xff,0xff,0xff,0xd0,0x80,0xa0,0x55,0x54,0x15,0x7f,0xff,0xff,0xff,0x52,0x80,0xa0,0x55,0x41,0x57,0xff,0xff,0xff,0xff,0x42,0x80,0xa0,0x54,0x15,0x7f,0xff,0xff,0xff,0xfd,0x42,0x80,0xa0,0x55,0x57,0xff,0xff,0xff,0xff,0xfd,0x42,0x80,0xa1,0x55,0x7f,0xff,0xff,0xff,0xff,0xfd,0x42,0xa0,0x81,0x57,0xff,0xff,0xff,0xff,0xff,0xfd,0x40,0xaa,0x05,0x7f,0xff,0xff,0xff,0xff,0xff,0xfd,0x50,0xa0,0x57,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x54,0x05,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xd5,0x5f,0xff,0xff,0xff,0xff,0xff,0xf0 ],
            121,
            17,
            39,
            54,
            BLIT_2BPP
        );

        // Draw Fireball
        *DRAW_COLORS = 0x1234;
        blit(
            &[ 0xff,0xff,0xff,0xdf,0xff,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xff,0xff,0x4f,0xff,0xff,0xff,0x7f,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xfd,0xff,0x7f,0x7f,0xff,0xff,0xdf,0xd7,0xf5,0xff,0xff,0xf5,0x74,0xff,0x5f,0xfd,0xff,0x45,0x4f,0xd5,0x7f,0xdf,0xfd,0x1d,0xfd,0x57,0xfd,0xff,0xd1,0xff,0xd4,0x5f,0x57,0xff,0x5f,0xf5,0x05,0xf5,0x7f,0xd7,0xff,0x50,0x15,0x45,0xf5,0xff,0xd4,0x01,0x50,0x5f,0x7f,0xfd,0x40,0x04,0x01,0x7f,0xff,0x54,0x00,0x00,0x17,0xff,0xf5,0x40,0x00,0x00,0x5f,0xff,0x50,0x01,0x50,0x05,0xff,0xd4,0x01,0x55,0x50,0x17,0xfd,0x40,0x5a,0xa9,0x41,0x7f,0xd0,0x16,0xaa,0xa5,0x07,0xfd,0x05,0xaa,0xaa,0x94,0x7f,0xd5,0x6a,0xaa,0xaa,0x57,0xfd,0x5a,0xaa,0xaa,0xa9,0x7f,0xd5,0xaf,0xea,0xfe,0x97,0xfd,0x5a,0xaf,0xbe,0xa9,0x7f,0xf5,0xab,0xfb,0xfa,0x97,0xff,0x5a,0xaa,0xaa,0xa9,0x7f,0xfd,0x6b,0xaa,0xaa,0x5f,0xff,0xd5,0xaf,0xfa,0x95,0xff,0xff,0x56,0xaa,0xa5,0x7f,0xff,0xfd,0x5a,0xa9,0x5f,0xff,0xff,0xf5,0x55,0x57,0xff,0xff,0xff,0xf5,0x57,0xff,0xff ],
            82,
            54,
            22,
            34,
            BLIT_2BPP
        );

        // Draw Player
        *DRAW_COLORS = 0x1234;
        blit(
            &[ 0xff,0xff,0xff,0xfe,0xaa,0xaa,0xaf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xea,0xaa,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xaa,0xab,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xab,0xff,0xea,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xaa,0xab,0xff,0xff,0xaa,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xaa,0xfc,0x00,0x3e,0xaf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xaf,0x00,0x00,0xfa,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xea,0xab,0xc0,0x00,0x03,0xeb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0xaa,0xbc,0x00,0x00,0x0f,0xbf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xab,0xaf,0x00,0x40,0x10,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfa,0xba,0xf0,0x14,0x05,0x0f,0xbf,0xff,0xd4,0x3f,0xff,0xff,0xff,0xff,0xaf,0xaf,0x01,0x40,0x50,0xfb,0xff,0xf5,0x54,0xff,0xff,0xff,0xff,0xfa,0xfa,0xf0,0x00,0x00,0x0f,0xbf,0xfd,0xa6,0x93,0xff,0xff,0xff,0xff,0xbf,0xeb,0x00,0x00,0x00,0xeb,0xff,0xd9,0x65,0x3f,0xff,0xff,0xff,0xff,0xfe,0xbc,0x00,0x00,0x3e,0xff,0xfd,0x55,0x57,0xff,0xff,0xff,0xff,0xff,0xfa,0xf0,0x00,0x03,0xaf,0xff,0xfa,0xa9,0xff,0xff,0xff,0xff,0xff,0xff,0xeb,0xc0,0x00,0xfb,0xff,0xff,0xe6,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xaf,0xff,0xfe,0xbf,0xff,0xff,0xd5,0xff,0xff,0xff,0xff,0xff,0xff,0xaf,0xaa,0xaa,0xbe,0xaf,0xff,0xff,0x5f,0xff,0xff,0xff,0xff,0xff,0xaa,0xbf,0xff,0xff,0xaa,0xbf,0xff,0xf5,0x7f,0xff,0xff,0xff,0xff,0xea,0xaa,0xbf,0xff,0xaa,0xaa,0xff,0xff,0xd7,0xff,0xff,0xff,0xff,0xfa,0xaa,0xaa,0xab,0xaa,0xaa,0xaf,0xff,0xfc,0x10,0xff,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xba,0xaa,0xaa,0xbf,0xff,0xc4,0x03,0xff,0xff,0xff,0xea,0xaa,0xaa,0xab,0xaa,0xaa,0xab,0xff,0xfc,0x40,0x3f,0xff,0xff,0xfe,0xaa,0xaa,0xaa,0xba,0xaa,0xaa,0xaf,0xfe,0xb1,0x03,0xff,0xff,0xff,0xaa,0xaa,0xaa,0xaa,0xea,0xaa,0xaa,0xff,0xaa,0xc4,0xff,0xff,0xff,0xfa,0xaa,0xba,0xaa,0xae,0xaa,0xaa,0xab,0xea,0xab,0x57,0xff,0xff,0xfe,0xaa,0xab,0xaa,0xaa,0xea,0xae,0xaa,0xba,0xaa,0xad,0x7f,0xff,0xff,0xea,0xaa,0xfa,0xaa,0xae,0xaa,0xea,0xab,0xaa,0xaa,0xd5,0xff,0xff,0xfa,0xaa,0xbf,0xaa,0xaa,0xea,0xaf,0xaa,0xfa,0xaa,0xbf,0x5f,0xff,0xff,0xaa,0xab,0xea,0xab,0xae,0xaa,0xfa,0xaa,0xaa,0xaf,0xf5,0x7f,0xff,0xea,0xaa,0xfe,0xaa,0xba,0xea,0xab,0xea,0xaa,0xab,0xff,0xd7,0xff,0xfe,0xaa,0xaf,0xea,0xaa,0xae,0xaa,0xbf,0xaa,0xaa,0xff,0xfd,0x5f,0xff,0xaa,0xab,0xfa,0xaa,0xaa,0xea,0xab,0xfa,0xaa,0xbf,0xff,0xf5,0xff,0xfa,0xaa,0xbf,0xaa,0xaa,0xae,0xaa,0xbf,0xea,0xaf,0xff,0xff,0x57,0xfe,0xaa,0xaf,0xfa,0xaa,0xab,0xea,0xaa,0xff,0xab,0xff,0xff,0xfd,0x7f,0xea,0xaa,0xfe,0xaa,0xaa,0xba,0xaa,0xaf,0xff,0xff,0xff,0xff,0xd5,0xfa,0xaa,0xbf,0xea,0xaa,0xab,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff,0x5f,0xaa,0xab,0xfe,0xaa,0xaa,0xba,0xaa,0xaf,0xff,0xff,0xff,0xff,0xf5,0xea,0xaa,0xbf,0xaa,0xaa,0xaf,0xaa,0xaa,0xbf,0xff,0xff,0xff,0xff,0xfe,0xaa,0xaf,0xfa,0xaa,0xaa,0xea,0xea,0xab,0xff,0xff,0xff,0xff,0xff,0xaa,0xaa,0xff,0xaa,0xaa,0xae,0xae,0xaa,0xbf,0xff,0xff,0xff,0xff,0xfa,0xaa,0xbf,0xea,0xaa,0xab,0xea,0xaa,0xaa,0xff,0xff,0xff,0xff,0xff ],
            18,
            116,
            54,
            44,
            BLIT_2BPP
        );

        // Draw Coins
        *DRAW_COLORS = 0x0012;
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 1, 117, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 3, 128, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 3, 147, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 6, 137, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 9, 154, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 11, 121, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 13, 145, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 16, 129, 5, 5, BLIT_2BPP);
        blit(&[ 0x80,0x81,0x01,0x50,0x10,0x80,0x80 ], 19, 137, 5, 5, BLIT_2BPP);


        // Draw Text
        *DRAW_COLORS = 4;
        text("Press Z", 80, 110);
        text("to start!", 80, 120);
    }
}

// Update Function ---------------------------------------------------------------------------------------------------------
#[no_mangle]
fn update() {
    // Checks Game State
    unsafe {
        if GAME_MENU {
            // MENU STATE
            check_game_start();
            draw_menu_screen();
        } else if GAME_OVER {
            // GAME OVER STATE
            check_game_start();
            draw_game_over_screen();
        } else {
            // GAME ACTIVE STATE
            game_active_update();
            draw_game_active_screen();
        }
    }

    // Increment Frame Count
    unsafe {
        FRAME_COUNT += 1;
        /*
        TO IMPLEMENT
        // Change Scenario Speed
        if FRAME_COUNT % 1000 == 0 && SCENARIO_SPEED < 2 {
            SCENARIO_SPEED += 1;
        }
        */
    }
}
